// Code generated by Kitex v0.4.4. DO NOT EDIT.

package videoservice

import (
	"context"
	"fmt"
	video "github.com/Pinklr/tiktok_demo/kitex_gen/video"
	client "github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
	streaming "github.com/cloudwego/kitex/pkg/streaming"
	proto "google.golang.org/protobuf/proto"
)

func serviceInfo() *kitex.ServiceInfo {
	return videoServiceServiceInfo
}

var videoServiceServiceInfo = NewServiceInfo()

func NewServiceInfo() *kitex.ServiceInfo {
	serviceName := "VideoService"
	handlerType := (*video.VideoService)(nil)
	methods := map[string]kitex.MethodInfo{
		"Feed":        kitex.NewMethodInfo(feedHandler, newFeedArgs, newFeedResult, false),
		"VideoAction": kitex.NewMethodInfo(videoActionHandler, newVideoActionArgs, newVideoActionResult, false),
		"List":        kitex.NewMethodInfo(listHandler, newListArgs, newListResult, false),
		"MGetVideo":   kitex.NewMethodInfo(mGetVideoHandler, newMGetVideoArgs, newMGetVideoResult, false),
	}
	extra := map[string]interface{}{
		"PackageName": "douyin.core",
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         methods,
		PayloadCodec:    kitex.Protobuf,
		KiteXGenVersion: "v0.4.4",
		Extra:           extra,
	}
	return svcInfo
}

func feedHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(video.FeedRequest)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(video.VideoService).Feed(ctx, req)
		if err != nil {
			return err
		}
		if err := st.SendMsg(resp); err != nil {
			return err
		}
	case *FeedArgs:
		success, err := handler.(video.VideoService).Feed(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*FeedResult)
		realResult.Success = success
	}
	return nil
}
func newFeedArgs() interface{} {
	return &FeedArgs{}
}

func newFeedResult() interface{} {
	return &FeedResult{}
}

type FeedArgs struct {
	Req *video.FeedRequest
}

func (p *FeedArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(video.FeedRequest)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *FeedArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *FeedArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *FeedArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, fmt.Errorf("No req in FeedArgs")
	}
	return proto.Marshal(p.Req)
}

func (p *FeedArgs) Unmarshal(in []byte) error {
	msg := new(video.FeedRequest)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var FeedArgs_Req_DEFAULT *video.FeedRequest

func (p *FeedArgs) GetReq() *video.FeedRequest {
	if !p.IsSetReq() {
		return FeedArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *FeedArgs) IsSetReq() bool {
	return p.Req != nil
}

type FeedResult struct {
	Success *video.FeedResponse
}

var FeedResult_Success_DEFAULT *video.FeedResponse

func (p *FeedResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(video.FeedResponse)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *FeedResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *FeedResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *FeedResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, fmt.Errorf("No req in FeedResult")
	}
	return proto.Marshal(p.Success)
}

func (p *FeedResult) Unmarshal(in []byte) error {
	msg := new(video.FeedResponse)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *FeedResult) GetSuccess() *video.FeedResponse {
	if !p.IsSetSuccess() {
		return FeedResult_Success_DEFAULT
	}
	return p.Success
}

func (p *FeedResult) SetSuccess(x interface{}) {
	p.Success = x.(*video.FeedResponse)
}

func (p *FeedResult) IsSetSuccess() bool {
	return p.Success != nil
}

func videoActionHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(video.VideoActionRequest)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(video.VideoService).VideoAction(ctx, req)
		if err != nil {
			return err
		}
		if err := st.SendMsg(resp); err != nil {
			return err
		}
	case *VideoActionArgs:
		success, err := handler.(video.VideoService).VideoAction(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*VideoActionResult)
		realResult.Success = success
	}
	return nil
}
func newVideoActionArgs() interface{} {
	return &VideoActionArgs{}
}

func newVideoActionResult() interface{} {
	return &VideoActionResult{}
}

type VideoActionArgs struct {
	Req *video.VideoActionRequest
}

func (p *VideoActionArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(video.VideoActionRequest)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *VideoActionArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *VideoActionArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *VideoActionArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, fmt.Errorf("No req in VideoActionArgs")
	}
	return proto.Marshal(p.Req)
}

func (p *VideoActionArgs) Unmarshal(in []byte) error {
	msg := new(video.VideoActionRequest)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var VideoActionArgs_Req_DEFAULT *video.VideoActionRequest

func (p *VideoActionArgs) GetReq() *video.VideoActionRequest {
	if !p.IsSetReq() {
		return VideoActionArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *VideoActionArgs) IsSetReq() bool {
	return p.Req != nil
}

type VideoActionResult struct {
	Success *video.VideoActionResponse
}

var VideoActionResult_Success_DEFAULT *video.VideoActionResponse

func (p *VideoActionResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(video.VideoActionResponse)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *VideoActionResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *VideoActionResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *VideoActionResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, fmt.Errorf("No req in VideoActionResult")
	}
	return proto.Marshal(p.Success)
}

func (p *VideoActionResult) Unmarshal(in []byte) error {
	msg := new(video.VideoActionResponse)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *VideoActionResult) GetSuccess() *video.VideoActionResponse {
	if !p.IsSetSuccess() {
		return VideoActionResult_Success_DEFAULT
	}
	return p.Success
}

func (p *VideoActionResult) SetSuccess(x interface{}) {
	p.Success = x.(*video.VideoActionResponse)
}

func (p *VideoActionResult) IsSetSuccess() bool {
	return p.Success != nil
}

func listHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(video.ListRequest)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(video.VideoService).List(ctx, req)
		if err != nil {
			return err
		}
		if err := st.SendMsg(resp); err != nil {
			return err
		}
	case *ListArgs:
		success, err := handler.(video.VideoService).List(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*ListResult)
		realResult.Success = success
	}
	return nil
}
func newListArgs() interface{} {
	return &ListArgs{}
}

func newListResult() interface{} {
	return &ListResult{}
}

type ListArgs struct {
	Req *video.ListRequest
}

func (p *ListArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(video.ListRequest)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *ListArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *ListArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *ListArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, fmt.Errorf("No req in ListArgs")
	}
	return proto.Marshal(p.Req)
}

func (p *ListArgs) Unmarshal(in []byte) error {
	msg := new(video.ListRequest)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var ListArgs_Req_DEFAULT *video.ListRequest

func (p *ListArgs) GetReq() *video.ListRequest {
	if !p.IsSetReq() {
		return ListArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *ListArgs) IsSetReq() bool {
	return p.Req != nil
}

type ListResult struct {
	Success *video.ListResponse
}

var ListResult_Success_DEFAULT *video.ListResponse

func (p *ListResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(video.ListResponse)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *ListResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *ListResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *ListResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, fmt.Errorf("No req in ListResult")
	}
	return proto.Marshal(p.Success)
}

func (p *ListResult) Unmarshal(in []byte) error {
	msg := new(video.ListResponse)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *ListResult) GetSuccess() *video.ListResponse {
	if !p.IsSetSuccess() {
		return ListResult_Success_DEFAULT
	}
	return p.Success
}

func (p *ListResult) SetSuccess(x interface{}) {
	p.Success = x.(*video.ListResponse)
}

func (p *ListResult) IsSetSuccess() bool {
	return p.Success != nil
}

func mGetVideoHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(video.MGetVideoRequest)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(video.VideoService).MGetVideo(ctx, req)
		if err != nil {
			return err
		}
		if err := st.SendMsg(resp); err != nil {
			return err
		}
	case *MGetVideoArgs:
		success, err := handler.(video.VideoService).MGetVideo(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*MGetVideoResult)
		realResult.Success = success
	}
	return nil
}
func newMGetVideoArgs() interface{} {
	return &MGetVideoArgs{}
}

func newMGetVideoResult() interface{} {
	return &MGetVideoResult{}
}

type MGetVideoArgs struct {
	Req *video.MGetVideoRequest
}

func (p *MGetVideoArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(video.MGetVideoRequest)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *MGetVideoArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *MGetVideoArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *MGetVideoArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, fmt.Errorf("No req in MGetVideoArgs")
	}
	return proto.Marshal(p.Req)
}

func (p *MGetVideoArgs) Unmarshal(in []byte) error {
	msg := new(video.MGetVideoRequest)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var MGetVideoArgs_Req_DEFAULT *video.MGetVideoRequest

func (p *MGetVideoArgs) GetReq() *video.MGetVideoRequest {
	if !p.IsSetReq() {
		return MGetVideoArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *MGetVideoArgs) IsSetReq() bool {
	return p.Req != nil
}

type MGetVideoResult struct {
	Success *video.MGetVideoResponse
}

var MGetVideoResult_Success_DEFAULT *video.MGetVideoResponse

func (p *MGetVideoResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(video.MGetVideoResponse)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *MGetVideoResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *MGetVideoResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *MGetVideoResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, fmt.Errorf("No req in MGetVideoResult")
	}
	return proto.Marshal(p.Success)
}

func (p *MGetVideoResult) Unmarshal(in []byte) error {
	msg := new(video.MGetVideoResponse)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *MGetVideoResult) GetSuccess() *video.MGetVideoResponse {
	if !p.IsSetSuccess() {
		return MGetVideoResult_Success_DEFAULT
	}
	return p.Success
}

func (p *MGetVideoResult) SetSuccess(x interface{}) {
	p.Success = x.(*video.MGetVideoResponse)
}

func (p *MGetVideoResult) IsSetSuccess() bool {
	return p.Success != nil
}

type kClient struct {
	c client.Client
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c: c,
	}
}

func (p *kClient) Feed(ctx context.Context, Req *video.FeedRequest) (r *video.FeedResponse, err error) {
	var _args FeedArgs
	_args.Req = Req
	var _result FeedResult
	if err = p.c.Call(ctx, "Feed", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) VideoAction(ctx context.Context, Req *video.VideoActionRequest) (r *video.VideoActionResponse, err error) {
	var _args VideoActionArgs
	_args.Req = Req
	var _result VideoActionResult
	if err = p.c.Call(ctx, "VideoAction", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) List(ctx context.Context, Req *video.ListRequest) (r *video.ListResponse, err error) {
	var _args ListArgs
	_args.Req = Req
	var _result ListResult
	if err = p.c.Call(ctx, "List", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) MGetVideo(ctx context.Context, Req *video.MGetVideoRequest) (r *video.MGetVideoResponse, err error) {
	var _args MGetVideoArgs
	_args.Req = Req
	var _result MGetVideoResult
	if err = p.c.Call(ctx, "MGetVideo", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
